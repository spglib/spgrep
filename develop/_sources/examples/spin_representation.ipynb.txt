{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spin representation for $C_{3v}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spgrep==0.3.2.dev5+ga44d231\n"
     ]
    }
   ],
   "source": [
    "from __future__ import annotations\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import spgrep\n",
    "from spgrep import get_crystallographic_pointgroup_spinor_irreps_from_symmetry\n",
    "from spgrep.representation import get_character\n",
    "from spgrep.pointgroup import pg_dataset\n",
    "\n",
    "print(f\"spgrep=={spgrep.__version__}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare point-group operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hexagonal lattice\n",
    "a = 2.0\n",
    "c = 3.0\n",
    "lattice = np.array(\n",
    "    [\n",
    "        [a, 0, 0],\n",
    "        [-0.5 * a, np.sqrt(3) / 2 * a, 0],\n",
    "        [0, 0, c],\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# C3v (3m1)\n",
    "rotations = np.array(pg_dataset[\"3m\"][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Unitary matrices for spinor\n",
    "\n",
    "We can enumerate irreps of a point group for spinor by `get_crystallographic_pointgroup_spinor_irreps_from_symmetry`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We need ``lattice`` to convert rotations into Cartesian coordinates\n",
    "(\n",
    "    irreps,\n",
    "    factor_system,\n",
    "    unitary_rotations,\n",
    ") = get_crystallographic_pointgroup_spinor_irreps_from_symmetry(\n",
    "    lattice,\n",
    "    rotations,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We write ``rotations[i]`` as $\\mathbf{R}_{i}$ and ``unitary_rotations[i]`` as $\\mathbf{U}_{i}$ for clarity.\n",
    "Be careful that ``unitary_rotations`` live in $\\mathrm{SU}(2)$.\n",
    "For example, while the third power of $\\mathbf{R}_{1}$ gives the identity, that of ``\\mathbf{U}_{1}`` gives $-\\mathbf{1}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 0, 0],\n",
       "       [0, 1, 0],\n",
       "       [0, 0, 1]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rotations[1] @ rotations[1] @ rotations[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.-0.j,  0.+0.j],\n",
       "       [ 0.+0.j, -1.+0.j]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.around(unitary_rotations[1] @ unitary_rotations[1] @ unitary_rotations[1], 8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Such an ambiguity is reflected in ``factor_system``.\n",
    "For another example, while $\\mathbf{R}_{1} \\mathbf{R}_{3} = \\mathbf{R}_{5}$, we obtain $\\mathbf{U}_{1} \\mathbf{U}_{3} = -\\mathbf{U}_{5}$ in our convention:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert np.allclose(\n",
    "    unitary_rotations[1] @ unitary_rotations[3],\n",
    "    -unitary_rotations[5],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The corresponding multiplier $z(\\mathbf{R}_{1}, \\mathbf{R}_{3})$ is given in ``factor_system``,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-1+0j)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factor_system[1, 3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Enumerate spin representations from factor system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.+0.j 1.+0.j 1.+0.j 0.+0.j 0.+0.j 0.+0.j]\n",
      "[ 1.+0.j -1.+0.j -1.+0.j  0.+1.j  0.-1.j  0.+1.j]\n",
      "[ 1.+0.j -1.+0.j -1.+0.j  0.-1.j  0.+1.j  0.-1.j]\n"
     ]
    }
   ],
   "source": [
    "for irrep in irreps:\n",
    "    print(get_character(irrep))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.4 64-bit ('spgrep')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "88c77d0dd5409a9a505b149d1d516cb944fb2ee79f549abf35dc2e7bd6c12498"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
