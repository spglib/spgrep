{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spin representation for $C_{3v}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spgrep==0.3.0\n"
     ]
    }
   ],
   "source": [
    "from __future__ import annotations\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import spgrep\n",
    "from spgrep.representation import get_character\n",
    "from spgrep.pointgroup import pg_dataset\n",
    "from spgrep.spinor import (\n",
    "    enumerate_spinor_small_representations,\n",
    ")\n",
    "\n",
    "print(f\"spgrep=={spgrep.__version__}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hexagonal lattice\n",
    "a = 2.0\n",
    "c = 3.0\n",
    "lattice = np.array(\n",
    "    [\n",
    "        [a, 0, 0],\n",
    "        [-0.5 * a, np.sqrt(3) / 2 * a, 0],\n",
    "        [0, 0, c],\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# C3v (3m1)\n",
    "rotations = np.array(pg_dataset[\"3m\"][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Unitary matrices for spinor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "irreps, unitary_rotations, factor_system = enumerate_spinor_small_representations(\n",
    "    lattice,\n",
    "    little_rotations=rotations,\n",
    "    little_translations=np.zeros((len(rotations), 3)),\n",
    "    kpoint=np.zeros(3),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 0]\n",
      " [0 1 0]\n",
      " [0 0 1]]\n",
      "[[1.+0.j 0.+0.j]\n",
      " [0.+0.j 1.+0.j]]\n",
      "\n",
      "[[ 0 -1  0]\n",
      " [ 1 -1  0]\n",
      " [ 0  0  1]]\n",
      "[[0.5-0.866j 0. +0.j   ]\n",
      " [0. +0.j    0.5+0.866j]]\n",
      "\n",
      "[[-1  1  0]\n",
      " [-1  0  0]\n",
      " [ 0  0  1]]\n",
      "[[0.5+0.866j 0. +0.j   ]\n",
      " [0. +0.j    0.5-0.866j]]\n",
      "\n",
      "[[ 0 -1  0]\n",
      " [-1  0  0]\n",
      " [ 0  0  1]]\n",
      "[[ 0.   +0.j  -0.866-0.5j]\n",
      " [ 0.866-0.5j  0.   +0.j ]]\n",
      "\n",
      "[[-1  1  0]\n",
      " [ 0  1  0]\n",
      " [ 0  0  1]]\n",
      "[[0.+0.j 0.-1.j]\n",
      " [0.-1.j 0.+0.j]]\n",
      "\n",
      "[[ 1  0  0]\n",
      " [ 1 -1  0]\n",
      " [ 0  0  1]]\n",
      "[[ 0.   +0.j   0.866-0.5j]\n",
      " [-0.866-0.5j  0.   +0.j ]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for rot, unitary_rot in zip(rotations, unitary_rotations):\n",
    "    print(rot)\n",
    "    print(np.around(unitary_rot, 4))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j],\n",
       "       [ 1.+0.j, -1.+0.j,  1.+0.j, -1.+0.j,  1.+0.j,  1.+0.j],\n",
       "       [ 1.+0.j,  1.+0.j, -1.+0.j,  1.+0.j,  1.+0.j, -1.+0.j],\n",
       "       [ 1.+0.j,  1.+0.j, -1.+0.j, -1.+0.j, -1.+0.j,  1.+0.j],\n",
       "       [ 1.+0.j,  1.+0.j,  1.+0.j, -1.+0.j, -1.+0.j, -1.+0.j],\n",
       "       [ 1.+0.j, -1.+0.j,  1.+0.j,  1.+0.j, -1.+0.j, -1.+0.j]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factor_system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(\n",
    "    unitary_rotations[1] @ unitary_rotations[3],\n",
    "    -unitary_rotations[5],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Enumerate spin representations from factor system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.+0.j 1.+0.j 1.+0.j 0.+0.j 0.+0.j 0.+0.j]\n",
      "[ 1.+0.j -1.+0.j -1.+0.j  0.+1.j  0.-1.j  0.+1.j]\n",
      "[ 1.+0.j -1.+0.j -1.+0.j  0.-1.j  0.+1.j  0.-1.j]\n"
     ]
    }
   ],
   "source": [
    "for irrep in irreps:\n",
    "    print(get_character(irrep))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.4 64-bit ('spgrep')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "88c77d0dd5409a9a505b149d1d516cb944fb2ee79f549abf35dc2e7bd6c12498"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
